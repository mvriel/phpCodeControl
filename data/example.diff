# This patch file was generated by NetBeans IDE
# Following Index: paths are relative to: /home/mvriel/NetBeansProjects/emma.unet.nl/plugins/emmaOrderEntryPlugin/lib/ordering
# This patch can be applied using context Tools: Patch action on respective folder.
# It uses platform neutral UTF-8 encoding and \n newlines.
# Above lines and this line are ignored by the patching process.
Index: form_components/did_block_form_component.php
--- form_components/did_block_form_component.php Base (BASE)
+++ form_components/did_block_form_component.php Locally Modified (Based On LOCAL)
@@ -312,16 +312,10 @@
                 array(Target::widget($this[self::FIELD_PHONE_NUMBER_BLOCK]))));
       }
 
-      // hide the zipcode and housenumber fields in case of a new service number
+      // hide the circuit field in case of a new service number
       $this->addValidator(Rule::blacklist(
               Expr::substr($this[self::FIELD_NUMBER_BLOCK_START], "3188"),
               array(
-              Target::widget($this[self::FIELD_FROM_PREFIX]),
-              Target::widget($this[self::FIELD_FROM_INITIALS]),
-              Target::widget($this[self::FIELD_FROM_LASTNAME]),
-              Target::widget($this[self::FIELD_FROM_ORGANIZATION]),
-              Target::widget($this[self::FIELD_FROM_ADDRESS_ZIPCODE]),
-              Target::widget($this[self::FIELD_FROM_ADDRESS_NUMBER]),
               Target::widget($this[self::FIELD_CIRCUIT])
               )
       ));
@@ -789,8 +783,16 @@
 
     if ($this->getOption(self::OPTION_BLOCK_SIZE_PREDEFINED, false) === false)
     {
+        if (EmmaPhonenumber::isServiceNumber($form->getValue(self::FIELD_NUMBER_BLOCK_START)))
+        {
+          $this->registerFeatureChoice($order_context, $form, self::FIELD_BLOCK_SIZE, Feature::DID_BLOCK_SIZE_100, true);
+        }
+        else
+        {
       $this->registerFeatureChoice($order_context, $form, self::FIELD_BLOCK_SIZE);
     }
+        $this->addDidBlockPriceFeature($order_context);
+    }
 
     // register parameters based on the order type
     switch ($order_type)
@@ -813,7 +815,6 @@
       // Assign value 1 when service number
         if (EmmaPhonenumber::isServiceNumber($form->getValue(self::FIELD_NUMBER_BLOCK_START)))
         {
-          $this->registerFeatureChoice($order_context, $form, self::FIELD_BLOCK_SIZE, Feature::DID_BLOCK_SIZE_100);
           $order_context->setParameter(DidBlockOrderComponent::DID_BLOCK_OPERATOR_CODE, DidOperator::OPERATOR_CODE_KPN);
         }
         else
@@ -860,12 +861,7 @@
     {
       $order_context->setParameter(self::FIELD_DEPLOYED_ON, $this->getOption(self::OPTION_TENANT_ID));
     }
-
-    if ($this->getOption(self::OPTION_BLOCK_SIZE_PREDEFINED, false) === false)
-    {
-      $this->addDidBlockPriceFeature($order_context);
     }
-  }
\ No newline at end of file
 
   /**
    * Routines used to validate
Index: form_components/form_component.php
--- form_components/form_component.php Base (BASE)
+++ form_components/form_component.php Locally Modified (Based On LOCAL)
@@ -128,8 +128,11 @@
 	 * @param EmmaForm $form
 	 * @param string $form_field_name
 	 * @param integer $form_field_value
+         * @param boolean $override_standard Overrides any standard value, if set
+         *
+         * @return void
 	 */
-	protected function registerFeatureChoice(OrderContext $order_context, EmmaForm $form, $form_field_name, $form_field_value = null)
+	protected function registerFeatureChoice(OrderContext $order_context, EmmaForm $form, $form_field_name, $form_field_value = null, $override_standard = false)
 	{
 		// check parameters
 		if (!is_string($form_field_name)) throw new Exception("Incorrect datatype for form field name");
@@ -147,7 +150,7 @@
 		}
 
 		// register the feature with the order context
-		$order_context->addFeatureId($this->getPortfolioProduct(), (int) $form_field_value);
\ No newline at end of file
+		$order_context->addFeatureId($this->getPortfolioProduct(), (int) $form_field_value, null, $override_standard);
\ No newline at end of file
 	}
 
 	/**
Index: order_contexts/OrderContext.php
--- order_contexts/OrderContext.php Base (BASE)
+++ order_contexts/OrderContext.php Locally Modified (Based On LOCAL)
@@ -99,6 +99,13 @@
 	private $features_deselected = array();
 
 	/**
+	 * Features marked which override any eventual standard versions
+	 *
+	 * @var array of Feature indexed by Feature.id
+	 */
+	private $features_override_standard = array();
+
+        /**
 	 * Parameters for the ordered portfolio product indexed by parameter name
 	 *
 	 * @var array of <parameter-name> = <parameter-value>
@@ -359,18 +366,27 @@
 			{
 				$feature_group = FeatureGroupPeer::retrieveByPK($feature->getFeatureGroupId());
 				$selected_feature = $this->getSelectedFeature($feature->getFeatureGroupId());
+
+                                // check if this feature does not purposely override the standard (USE SPARINGLY!)
+                                if (!in_array($selected_feature->getFeatureId(), array_keys($this->features_override_standard)))
+                                {
 				throw new Exception("Feature registered for feature group '" . $feature_group .
 									"' does not match standard feature " . $feature->getFeatureCode() .
 									" (" . $feature . "); found: " . $selected_feature->getFeatureCode() . " (" . $selected_feature . ")");
 			}
+			}
 
 		 	// determine the feature value
 		 	$feature_value = $standard_feature_values[$product_feature->getProductFeatureId()];
 
+                        // only register if it was not overridden (because then it would already been registered)
+                        if (!in_array($selected_feature->getFeatureId(), array_keys($this->features_override_standard)))
+                        {
 			// register the feature
 	 		$this->addProductFeature($product_feature, $feature_value);
 		}
 	}
+	}
 
 	/**
 	 * Disables automatic registration of standard features
@@ -645,10 +661,13 @@
 	 * @param PortfolioProduct $portfolio_product
 	 * @param int $feature_id ID of the feature (not the product feature id!)
 	 * @param mixed $feature_value Optional value for product feature
+         * @param boolean $override_standard Overrides any standard value, if set
+         *
 	 * @return ProductFeature registered with the order
+         * 
 	 * @throws Exception if product feature could not be found
 	 */
-	public function addFeatureId(PortfolioProduct $portfolio_product, $feature_id, $feature_value = null)
+	public function addFeatureId(PortfolioProduct $portfolio_product, $feature_id, $feature_value = null, $override_standard = false)
 	{
 		// check parameters
 		if (!is_int($feature_id) && !is_string($feature_id)) throw new Exception("Incorrect datatype for feature id");
@@ -667,6 +686,12 @@
 		// register the product feature
 		$this->addProductFeature($product_feature, $feature_value);
 
+                // if this is marked as overriding the standard, remember this
+                if ($override_standard)
+                {
+                  $this->features_override_standard[$feature_id] = $product_feature;
+                }
+
\ No newline at end of file
 		return $product_feature;
 	}
 
